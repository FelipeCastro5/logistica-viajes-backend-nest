dame el hanlder y command segun estos ejemplos
// create-usuario.command.ts
export class CreateUsuarioCommand {
  constructor(
    public readonly fk_tipodoc: number,
    public readonly num_doc: string,
    public readonly fk_rol: number,
    public readonly fk_contador: number,
    public readonly p_nombre: string,
    public readonly s_nombre: string,
    public readonly p_apellido: string,
    public readonly s_apellido: string,
    public readonly telefono: string,
    public readonly correo: string,
    public readonly contrasena: string,
  ) {}
} ]]
// delete-usuario.command.ts
export class DeleteUsuarioCommand {
  constructor(public readonly id: number) {}
}
// get-all-usuarios.command.ts
export class GetAllUsuariosCommand {}
// get-usuario-by-id.command.ts
export class GetUsuarioByIdCommand {
  constructor(public readonly id: number) {}
}
// update-usuario.command.ts
export class UpdateUsuarioCommand {
  constructor(
    public readonly id: number,
    public readonly fk_tipodoc: number,
    public readonly num_doc: string,
    public readonly fk_rol: number,
    public readonly fk_contador: number,
    public readonly p_nombre: string,
    public readonly s_nombre: string,
    public readonly p_apellido: string,
    public readonly s_apellido: string,
    public readonly telefono: string,
    //public readonly correo: string,
    //public readonly contrasena: string,
  ) {}
}

// create-usuario.handler.ts
import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
import { CreateUsuarioCommand } from '../commands/create-usuario.command';
import { Inject, Injectable } from '@nestjs/common';
import { UsuarioInterface } from '../../../domain/usuario-domain/usuario.interface';
import { ResponseUtil } from '../../utilities/response.util';

@CommandHandler(CreateUsuarioCommand)
@Injectable()
export class CreateUsuarioHandler implements ICommandHandler<CreateUsuarioCommand> {
  constructor(
    @Inject('UsuarioInterface')
    private readonly usuarioRepository: UsuarioInterface,
  ) { }

  async execute(command: CreateUsuarioCommand) {
    try {
      const usuario = await this.usuarioRepository.createUsuario(
        command.fk_tipodoc,
        command.num_doc,
        command.fk_rol,
        command.fk_contador,
        command.p_nombre,
        command.s_nombre,
        command.p_apellido,
        command.s_apellido,
        command.telefono,
        command.correo,
        command.contrasena
      );
      return ResponseUtil.success(usuario, 'Usuario creado exitosamente', 201);
    } catch (error) {
      // Si es HttpException, extrae su status
      console.error('Error en CreateUsuarioHandler:', error);
      const status = error.getStatus?.() ?? 500;
      const message = error.response?.message || 'Error al crear el usuario';
      return ResponseUtil.error(message, status);
    }
  }
}
// delete-usuario.handler.ts
import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
import { DeleteUsuarioCommand } from '../commands/delete-usuario.command';
import { Inject, Injectable } from '@nestjs/common';
import { UsuarioInterface } from '../../../domain/usuario-domain/usuario.interface';
import { ResponseUtil } from '../../utilities/response.util';

@CommandHandler(DeleteUsuarioCommand)
@Injectable()
export class DeleteUsuarioHandler implements ICommandHandler<DeleteUsuarioCommand> {
  constructor(
    @Inject('UsuarioInterface')
    private readonly usuarioRepository: UsuarioInterface,
  ) {}

  async execute(command: DeleteUsuarioCommand) {
    try {
      const result = await this.usuarioRepository.deleteUsuario(command.id);
      if (!result?.rowCount) {
        return ResponseUtil.error('Usuario no encontrado', 404);
      }
      return ResponseUtil.success(null, 'Usuario eliminado exitosamente', 200);
    } catch (error) {
      console.error('Error en DeleteUsuarioHandler:', error);
      const status = error.getStatus?.() ?? 500;
      const message = error.response?.message || 'Error al eliminar el usuario';
      return ResponseUtil.error(message, status);
    }
  }
}
// get-all-usuarios.handler.ts
import { QueryHandler, IQueryHandler } from '@nestjs/cqrs';
import { GetAllUsuariosCommand } from '../commands/get-all-usuarios.command';
import { Inject, Injectable } from '@nestjs/common';
import { UsuarioInterface } from '../../../domain/usuario-domain/usuario.interface';
import { ResponseUtil } from '../../utilities/response.util';

@QueryHandler(GetAllUsuariosCommand)
@Injectable()
export class GetAllUsuariosHandler implements IQueryHandler<GetAllUsuariosCommand> {
  constructor(
    @Inject('UsuarioInterface')
    private readonly usuarioRepository: UsuarioInterface,
  ) {}

  async execute(): Promise<any> {
    try {
      const usuarios = await this.usuarioRepository.getAll();
      return ResponseUtil.success(usuarios, 'Usuarios obtenidos exitosamente');
    } catch (error) {
      console.error('Error en GetAllUsuariosHandler:', error);
      const status = error.getStatus?.() ?? 500;
      const message = error.response?.message || 'Error al obtener los usuarios';
      return ResponseUtil.error(message, status);
    }
  }
}
// get-usuario-by-id.handler.ts
import { QueryHandler, IQueryHandler } from '@nestjs/cqrs';
import { GetUsuarioByIdCommand } from '../commands/get-usuario-by-id.command';
import { Inject, Injectable } from '@nestjs/common';
import { UsuarioInterface } from '../../../domain/usuario-domain/usuario.interface';
import { ResponseUtil } from '../../utilities/response.util';

@QueryHandler(GetUsuarioByIdCommand)
@Injectable()
export class GetUsuarioByIdHandler implements IQueryHandler<GetUsuarioByIdCommand> {
  constructor(
    @Inject('UsuarioInterface')
    private readonly usuarioRepository: UsuarioInterface,
  ) {}

  async execute(command: GetUsuarioByIdCommand) {
    try {
      const usuario = await this.usuarioRepository.getById(command.id);
      if (!usuario) {
        return ResponseUtil.error('Usuario no encontrado', 404);
      }
      return ResponseUtil.success(usuario, 'Usuario encontrado exitosamente');
    } catch (error) {
      console.error('Error en GetUsuarioByIdHandler:', error);
      const status = error.getStatus?.() ?? 500;
      const message = error.response?.message || 'Error al obtener el usuario';
      return ResponseUtil.error(message, status);
    }
  }
}
// update-usuario.handler.ts
import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
import { UpdateUsuarioCommand } from '../commands/update-usuario.command';
import { Inject, Injectable } from '@nestjs/common';
import { UsuarioInterface } from '../../../domain/usuario-domain/usuario.interface';
import { ResponseUtil } from '../../utilities/response.util';

@CommandHandler(UpdateUsuarioCommand)
@Injectable()
export class UpdateUsuarioHandler implements ICommandHandler<UpdateUsuarioCommand> {
  constructor(
    @Inject('UsuarioInterface')
    private readonly usuarioRepository: UsuarioInterface,
  ) { }

  async execute(command: UpdateUsuarioCommand) {
    try {
      const result = await this.usuarioRepository.updateUsuario(
        command.id,
        command.fk_tipodoc,
        command.num_doc,
        command.fk_rol,
        command.fk_contador,
        command.p_nombre,
        command.s_nombre,
        command.p_apellido,
        command.s_apellido,
        command.telefono
      );
      if (!result?.rowCount) {
        return ResponseUtil.error('Usuario no encontrado', 404);
      }
      return ResponseUtil.success(null, 'Usuario actualizado exitosamente', 200);
    } catch (error) {
      console.error('Error en UpdateUsuarioHandler:', error);
      const status = error.getStatus?.() ?? 500;
      const message = error.response?.message || 'Error al actualizar el usuario';
      return ResponseUtil.error(message, status);
    }
  }
}