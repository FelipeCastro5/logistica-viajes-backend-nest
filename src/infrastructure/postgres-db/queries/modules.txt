dame las query module repository interface y entity de esta tabla como estos ejemplos
delete-usuario.sql
DELETE FROM usuario WHERE id_usuario = $1;
get-all-usuarios.sql
SELECT * FROM usuario;
get-usuario.sql
SELECT * FROM usuario WHERE id_usuario = $1;
insert-usuario.sql
INSERT INTO usuario (
  fk_tipodoc, num_doc, fk_rol, fk_contador,
  p_nombre, s_nombre, p_apellido, s_apellido,
  telefono, correo, contrasena
)
VALUES (
  $1, $2, $3, $4,
  $5, $6, $7, $8,
  $9, $10, $11
)
RETURNING *;
update-usuario.sql
UPDATE usuario
SET
  fk_tipodoc = $1,
  num_doc = $2,
  fk_rol = $3,
  fk_contador = $4,
  p_nombre = $5,
  s_nombre = $6,
  p_apellido = $7,
  s_apellido = $8,
  telefono = $9,
  correo = $10,
  contrasena = $11
WHERE id_usuario = $12
RETURNING *;
usuario.module.ts
import { Module } from '@nestjs/common';
import { CqrsModule } from '@nestjs/cqrs';
import { UsuarioRepository } from '../../infrastructure/repository/usuario.repository';
import { PostgresModule } from '../../infrastructure/postgres-db/postgres.module';
import { UsuarioController } from '../controllers/usuario.controller';

import { CreateUsuarioHandler } from '../../application/usuario/handlers/create-usuario.handler';
import { UpdateUsuarioHandler } from '../../application/usuario/handlers/update-usuario.handler';
import { DeleteUsuarioHandler } from '../../application/usuario/handlers/delete-usuario.handler';
import { GetAllUsuariosHandler } from '../../application/usuario/handlers/get-all-usuarios.handler';
import { GetUsuarioByIdHandler } from '../../application/usuario/handlers/get-usuario-by-id.handler';

@Module({
  imports: [PostgresModule, CqrsModule],
  providers: [
    {
      provide: 'UsuarioInterface',
      useClass: UsuarioRepository,
    },
    CreateUsuarioHandler,
    UpdateUsuarioHandler,
    DeleteUsuarioHandler,
    GetAllUsuariosHandler,
    GetUsuarioByIdHandler,
  ],
  controllers: [UsuarioController],
})
export class UsuarioModule {}
usuario.entity.ts
export class Usuario {
  id_usuario: number;
  fk_tipodoc: number;
  num_doc: string;
  fk_rol: number;
  fk_contador: number;
  p_nombre: string;
  s_nombre: string;
  p_apellido: string;
  s_apellido: string;
  telefono: string;
  correo: string;
  contrasena: string;
}
usuario.interface.ts
import { Usuario } from './usuario.entity';

export interface UsuarioInterface {
  getAll(): Promise<Usuario[]>;
  getById(id: number): Promise<Usuario | null>;
  createUsuario(
    fk_tipodoc: number,
    num_doc: string,
    fk_rol: number,
    fk_contador: number,
    p_nombre: string,
    s_nombre: string,
    p_apellido: string,
    s_apellido: string,
    telefono: string,
    correo: string,
    contrasena: string
  ): Promise<Usuario>;
  updateUsuario(
    id: number,
    fk_tipodoc: number,
    num_doc: string,
    fk_rol: number,
    fk_contador: number,
    p_nombre: string,
    s_nombre: string,
    p_apellido: string,
    s_apellido: string,
    telefono: string
  ): Promise<any>;
  deleteUsuario(id: number): Promise<any>;
}
usuario.repository.ts
import { Injectable } from '@nestjs/common';
import { UsuarioInterface } from '../../domain/usuario-domain/usuario.interface';
import { Usuario } from '../../domain/usuario-domain/usuario.entity';
import { PostgresService } from '../postgres-db/postgres.service';

@Injectable()
export class UsuarioRepository implements UsuarioInterface {
  constructor(private readonly postgresService: PostgresService) { }

  async getAll(): Promise<Usuario[]> {
    const query = this.postgresService.getQuery('get-all-usuarios');
    const result = await this.postgresService.query<Usuario>(query);
    return result.rows;
  }

  async getById(id: number): Promise<Usuario | null> {
    const query = this.postgresService.getQuery('get-usuario');
    const result = await this.postgresService.query<Usuario>(query, [id]);
    return result.rows[0] || null;
  }

  async createUsuario(
    fk_tipodoc: number,
    num_doc: string,
    fk_rol: number,
    fk_contador: number,
    p_nombre: string,
    s_nombre: string,
    p_apellido: string,
    s_apellido: string,
    telefono: string,
    correo: string,
    contrasena: string
  ): Promise<Usuario> {
    const query = this.postgresService.getQuery('insert-usuario');
    const params = [
      fk_tipodoc, num_doc, fk_rol, fk_contador,
      p_nombre, s_nombre, p_apellido, s_apellido, 
      telefono, correo, contrasena 
    ];
    const result = await this.postgresService.query<Usuario>(query, params);
    return result.rows[0];
  }

  async updateUsuario(
    id: number,
    fk_tipodoc: number,
    num_doc: string,
    fk_rol: number,
    fk_contador: number,
    p_nombre: string,
    s_nombre: string,
    p_apellido: string,
    s_apellido: string,
    telefono: string
  ): Promise<any> {
    const query = this.postgresService.getQuery('update-usuario');
    const params = [
      fk_tipodoc, num_doc, fk_rol, fk_contador,
      p_nombre, s_nombre, p_apellido, s_apellido, telefono,
      //correo, contrasena, 
      id
    ];
    return this.postgresService.query<any[]>(query, params);
  }

  async deleteUsuario(id: number): Promise<any> {
    const query = this.postgresService.getQuery('delete-usuario');
    return this.postgresService.query<any[]>(query, [id]);
  }
}
